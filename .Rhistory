}
}
lista<- 0
for (i in 1:dim(training)[2]) {
if ((class(training[,i])=="numeric") & (class(training[,i])=="integer")) {
if (sum(training[,i]) == 0) {
lista <- c(lista, i)
}
}
}
training  <- training[,-lista]
View(training)
set.seed(123)
inTrain <- createDataPartition(y=data$classe, p=0.60, list=FALSE)
training <- data[inTrain,]
testing <- data[-inTrain,]
training[is.na(training)] <- 0
testing[is.na(testing)] <- 0
set.seed(123)
x <- sample(1:159,20, replace = FALSE)
set.seed(123)
y <- sample(1:dim(training)[1],round(dim(training)[1]/45,0), replace = FALSE)
y2 <- sample(1:dim(testing)[1],round(dim(testing)[1]/20,0), replace = FALSE)
training <- training[y,c(x,160)]
testing <- testing[y2,c(x,160)]
set.seed(123)
training[is.na(training)] <- 0
testing[is.na(testing)] <- 0
View(training)
training[training=="#DIV/0!"] <- 0
View(training)
lista<- 0
for (i in 1:dim(training)[2]) {
if ((class(training[,i])=="numeric") & (class(training[,i])=="integer")) {
if (sum(training[,i]) == 0) {
lista <- c(lista, i)
}
}
}
lista
for (i in 1:dim(training)[2]) {
if ((class(training[,i])=="numeric") && (class(training[,i])=="integer")) {
if (sum(training[,i]) == 0) {
lista <- c(lista, i)
}
}
}
lista
lista<- 0
for (i in 1:dim(training)[2]) {
if ((class(training[,i])=="numeric")) {
if (sum(training[,i]) == 0) {
lista <- c(lista, i)
}
}
}
lista
training  <- training[,-lista]
View(training)
lista<- 0
for (i in 1:dim(training)[2]) {
if ((class(training[,i])=="integer")) {
if (sum(training[,i]) == 0) {
lista <- c(lista, i)
}
}
}
lista
class(training[,2])
as.numeric(training[,2])
training[is.na(training)] <- 0
View(training)
i
i<-2
(var(as.numeric(training[,i]))
)
sum(as.numeric(training[,i]))
as.numeric(training[,i])
is.na(as.numeric(training[,i])))<-1
is.na(as.numeric(training[,i]))<-1
training[is.na(as.numeric(training[,i]))]<-1
training[is.na(as.numeric(training))]<-1
(as.numeric(training))
as.numeric(training)
as.numeric(training[,i])
is.na(as.numeric(training[,i])
is.na(as.numeric(training[,i]))
is.na(as.numeric(training[,i]))
training[is.na(as.numeric(training[,i])),i]<-1
is.na(as.numeric(training[,i]))
training[is.na(as.numeric(training[,i])),i] <-1
str(training[,i])
i
View(training)
str(training[,i])
str(training)
sapply(training, max)
sapply(training, cor)
sapply(training, var)
sapply(training, var)[1]
sapply(training, var)[[1]]
sapply(training, var)[[2]]
sapply(training, var)[[2]]
sapply(training, var)[[1]]
sapply(training, var)[2]
sapply(as.numeric(training), var)[[2]]
sapply(training, var)[[2]]
sapply(training, var)[2]
sapply(training, var)
sapply(training, var)
lista <-0
for (i in 1:dim(training)[2]) {
if (sapply(training, var)[[i]] == NA) {
list <- c(listasapply,i)
}
}
list
lista
sapply(training, var)[[i]] == NA
i
i<-2
sapply(training, var)[[i]] == NA
sapply(training, var)[[i]] == NA
sapply(training, var)[[i]]
sapply(training, var)[[i]] == "NA"
sapply(training, var)[[i]]
sapply(training, var)[[i]] == "NA"
is.na(sapply(training, var)[[i]])
lista <-0
for (i in 1:dim(training)[2]) {
if (is.na(sapply(training, var)[[i]])) {
lista <- c(listasapply,i)
}
}
lista <-0
for (i in 1:dim(training)[2]) {
if (is.na(sapply(training, var)[[i]])) {
lista <- c(lista,i)
}
}
lista
View(training)
training  <- training[,-lista]
View(training)
modelFit <- train(classe ~., data=training, method="glm")
class(training[,4])
training[,4]
var(training[,4])
sum(training[,4])
lista <- c(4,6,8,10,11,12)
training  <- training[,-lista]
View(training)
modelFit <- train(classe ~., data=training, method="glm")
warnings(9)
warnings()
str(training)
modelFit <- train(classe ~roll_arm, data=training, method="glm")
modelFit <- train(classe ~accel_arm_z, data=training, method="glm")
modelFit <- train(classe ~accel_arm_z, data=training, method="lm")
modelFit <- train(classe ~accel_arm_z, data=training, method="glm")
modelFit <- train(classe ~accel_arm_z, data=training, method="glm",family="binomial")
accel_arm_z
warning(1)
warning(2)
warning(3)
modelFit <- train(classe~accel_arm_z, data=training, method="glm",family="binomial")
warning(3)
warning()
str(training)
modelFit <- train(as.numeric(classe)~accel_arm_z, data=training, method="glm",family="binomial")
modelFit <- train(classe~accel_arm_z, data=training,  method="rf", prox=TRUE)
warnings()
warnings(1)
warnings(2)
numericData <- data.frame(id=1:dim(training)[1])
n <- dim(training)[2]
for (i in 1:n) {
if (class(training[,i]) != "factor") {
e <- paste(names(training)[i])
numericData <- cbind(numericData,e=training[,i])
}
}
View(numericData)
preProc <- preProcess(numericData, method="pca", pcaComp=2)
numDataPCA <- predict(preProc, numericData)
varPCA <- sum(cov(numDataPCA))/sum(cov(numericData))
varPCA
FactorData <- data.frame(id=1:dim(training)[1])
n <- dim(training)[2]
for (i in 1:n) {
if (class(training[,i]) == "factor") {
e <- paste(names(training)[i])
FactorData <- cbind(FactorData,e=training[,i])
}
}
View(nFactorData)
View(FactorData)
modelFit <- train(classe~accel_arm_z, data=training, method="glm",family="binomial")
y<-training$classe
y<-training$classe
x <- training$accel_arm_z
modelFit <- train(x~y,method="glm",family="binomial")
x
y
modelFit <- train(y~x,method="glm",family="binomial")
modelFit <- train(y~x,method="glm")
R.Version()
save.image("~/env.RData")
modelFit <- train(y~x,method="glm")
library(caret)
library(e1071)
library(ggplot2)
library(plyr)
modelFit <- train(y~x,method="glm")
x <- sample(1:100,1)
y<- sample(1:50,10)
modelFit <- train(y~x,method="glm")
x <- sample(1:100,10)
modelFit <- train(y~x,method="glm")
test <- data.frame(x,y)
test
modelFit <- train(y~x,data=test,method="glm")
modelFit <- train(classe~accel_arm_z, data=training,  method="rf", prox=TRUE)
modelFit <- train(classe~accel_arm_z, data=training, method="glm",family="binomial")
x <- training$classe
x
class(x)
y<- training$accel_arm_z
class(y)
y <- training$classe
x<- training$accel_arm_z
test <- data.frame(x,y)
modelFit <- train(y~x,data=test,method="glm")
dim(y)
dim(test)
Vew(test)
View(test)
sum(test)
sum(test$x)
class(x)
modelFit <- train(y~x,data=test,method="glm",family="binomial")
cor(classe~accel_arm_z, data=training)
cor(test$x, test$y)
cor(test$x, as.numeric(test$y))
modelFit <- train(as.numeric(y)~x,data=test,method="glm",family="binomial")
modelFit <- train(as.factor(y)~x,data=test,method="glm",family="binomial")
as.factor(y)
dim(training)
View(training)
R.version)()
R.version()
library(caret)
modelFit <- train(as.factor(y)~x,data=test,method="glm",family="binomial")
?train
modelFit <- train(classe~accel_arm_z, data=training, method="glm",family="binomial",tuneGrid = data.frame(mtry = 3))
modelFit <- train(classe~accel_arm_z, data=training,  method="rf", prox=TRUE,tuneGrid = data.frame(mtry = 3))
modelFit <- train(classe~accel_arm_z, data=training, method="logreg",family="binomial",tuneGrid = data.frame(mtry = 3))
modelFit <- train(classe~accel_arm_z, data=training, method="glm",family="binomial")
modelFit <- train(classe~accel_arm_z, data=training, method="glm",family=binomial)
modelFit <- train(classe~accel_arm_z, data=training, method="glm",family=binomial, trControl = tc)
tc <- trainControl("cv", 10, savePredictions=T)
modelFit <- train(classe~accel_arm_z, data=training, method="glm",family=binomial, trControl = tc)
modelFit <- train(classe~accel_arm_z, data=training, method="glm",family="binomial", trControl = tc)
modelFit <- train(training$classe~training$accel_arm_z, data=training, method="glm",family="binomial", trControl = tc)
modelFit <- train(training$classe~training$accel_arm_z, data=training, method="glm",family=binomial(link = "logit"), trControl = tc)
tc <- trainControl("cv", 5, savePredictions=T)
modelFit <- train(training$classe~training$accel_arm_z, data=training, method="glm",family=binomial(link = "logit"), trControl = tc)
tc <- trainControl("cv", 1, savePredictions=T)
modelFit <- train(training$classe~training$accel_arm_z, data=training, method="glm",family=binomial(link = "logit"), trControl = tc)
tc <- trainControl("cv", 0, savePredictions=T)
modelFit <- train(training$classe~training$accel_arm_z, data=training, method="glm",family=binomial(link = "logit"), trControl = tc)
tc <- trainControl("cv", 1, savePredictions=T)
modelFit <- train(training$classe~training$accel_arm_z, data=training, method="glm",family=binomial(link = "logit"), trControl = tc)
modelFit <- train(training$classe~training$accel_arm_z, data=training, method="glm",family=binomial(link = "logit"))
modelFit <- train(training$classe~training$accel_arm_z, data=training, method="glm",family=binomial(link = "logit"), trControl = tc)
tc <- trainControl("cv", 1, savePredictions=T)
modelFit <- train(training$classe~training$accel_arm_z, data=training, method="glm",family=binomial(link = "logit"), trControl = tc)
tc <- trainControl("cv", 2, savePredictions=T)
modelFit <- train(training$classe~training$accel_arm_z, data=training, method="glm",family=binomial(link = "logit"), trControl = tc)
library(caret)
library(e1071)
library(ggplot2)
library(plyr)
raining
View(training)
modelFit <- train(classe~., data=training,  method="rpart")
modelFt
modelFit
modelFit1 <- train(classe~., data=training,  method="rpart")
modelFit2 <- train(classe~., data=training,  method="rpart", tuneLength=30)
modelFit2
cvCtrl <- trainControl(method="repeatedcv", repeats=3)
modelFit3 <- train(classe~., data=training, method="rpart", tuneLength=30, trControl=cvCtrl)
modelFit3
cvCtrl <- trainControl(method="repeatedcv", repeats=3,
summaryFunction= twoClassSummary,
classProbs=TRUE)
rpartTune <- train(classe~., data=training, method="rpart",
tuneLength=30,
metric="ROC",
trControl=cvCtrl)
install.packages("pROC")
library(pROC)
modelFit4 <- train(classe~., data=training, method="rpart",
tuneLength=30,
metric="ROC",
trControl=cvCtrl)
modelFit4 <- train(classe~., data=training, method="rpart",
tuneLength=30,
metric="ROC",
trControl=cvCtrl)
cvCtrl <- trainControl(method="repeatedcv", repeats=3,
summaryFunction= twoClassSummary,
classProbs=TRUE)
modelFit4 <- train(classe~., data=training, method="rpart",
tuneLength=30,
metric="ROC",
trControl=cvCtrl
)
plot.train(modelFit1)
plot.train(modelFit2)
plot.train(modelFit3)
plot.train(modelFit1$finalModel)
plot.train(modelFit2$finalModel)
plot(modelFit2$finalModel)
plot(modelFit1$finalModel)
plot(modelFit1$final2Model)
plot(modelFit2$finalModel)
plot(modelFit3$finalModel)
plot(modelFit3$finalModel)
text(modelFit3finalModel, use.n =TRUE, all=TRUE, cex=.8)
text(modelFit3$finalModel, use.n =TRUE, all=TRUE, cex=.8)
?na.omit
test <- na.omit(training)
test
grid <- expand.grid(.model="tree",
.trials = c(1:5),
.winnow=FALSE)
cvCtrl <- trainControl(method="repeatedcv", repeats=3,classProbs=TRUE)
gris
grid
cvCtrl <- trainControl(method="repeatedcv", repeats=3,classProbs=TRUE)
library(caret)
library(e1071)
library(ggplot2)
library(plyr)
library(pROC)
cvCtrl <- trainControl(method="repeatedcv", repeats=3,classProbs=TRUE)
c5tune <- train(trainX, training$classe,
method= "C5.0",
metric="ROC",
tuneGrid=grid,
trControl=cvCtrl)
trainX <- training[,names(training) != "classe"]
c5tune <- train(trainX, training$classe,
method= "C5.0",
metric="ROC",
tuneGrid=grid,
trControl=cvCtrl)
c5tune
plot(c5tune)
c5pred <- predict(c5tune, testing)
confusionMatrix(c5pred, testing$classe)
c5probs <- predict(c5tune, testing, type="prob")
c5probs
c5ROC <- roc(predictor= c5probs$PS,
response=testing$classe,
levels=rev(levels(testing$classe)))
c5ROC <- roc(predictor= c5probs$B,
c5ROC <- roc(predictor= c5probs$B,
response=testing$classe,
levels=rev(levels(testing$classe)))
c5ROC <- roc(predictor= c5probs$B,
response=testing$classe,
levels=rev(levels(testing$classe)))
c5ROC <- roc(predictor= c5probs$B,
response=testing$classe,
levels=rev(levels(testing$classe)))
C5ROC
c5ROC
plot(c5ROC)
histogram(c5probs$A/testing$classe)
save.image("~/.RData")
cvValues <-resamples(list(CART=modelFit3, c5.0=c5tune))
cvValues <-resamples(list(CART=modelFit3, c5.0=c5tune))
summary(cvValues)
library(lattice)
splom(cvValues, metric="ROC")
splom(cvValues, metric="kappa")
splom(cvValues, metric="Accuracy")
parallelplot(cvValues, metric="Accuracy")
dotplot(cvValues, metric="Accuracy")
rocDiffs <- diff(cvValues, metric="Accuracy")
summary(rocDiffs)
dotplot(rocDiffs, metric="Accuracy")
svmTune <-train(x=trainX,
y=training$classe,
method="svmRadial",
tuneLenght=9
preProc=c("center","scale"),
matric="Accuracy"
tvControl=cvControl)
set.seed(1)
svmTune <-train(x=trainX,
y=training$classe,
method="svmRadial",
tuneLenght=9
preProc=c("center","scale"),
matric="Accuracy"
tvControl=cvCtrl)
svmTune <-train(x=trainX,
y=training$classe,
method="svmRadial",
tuneLenght=9
preProc=c("center","scale"),
matric="Accuracy"
trControl=cvCtrl)
svmTune <-train(x=trainX,
y=training$classe,
method="svmRadial",
tuneLenght=9
preProc=c("center","scale"),
matric="Accuracy",
trControl=cvCtrl)
svmTune <-train(x=trainX,
y=training$classe,
method="svmRadial",
tuneLenght=9,
preProc=c("center","scale"),
matric="Accuracy",
trControl=cvCtrl)
svmTune
svmTune$finalModel
plot(svmTune, metroc="Accuracy", scales= list(x=list(log=2)))
svmPred <- predct(svmTune, testing[,names(testing) != "classe"] )
svmPred <- predict(svmTune, testing[,names(testing) != "classe"] )
testing[,names(testing) != "classe"]
svmPred <- predict(svmTune, testing )
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot(1)
myPlot(3)
myPlot(50)
myPlot(.01)
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
myPlot(.01)
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
install.packages("rChart")
library(rChart)
install.packages("rChart")
install.packages("shiny")
library(shiny)
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data Science FTW"),
sidebarPanel(
he('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
shinyUI(pageWithSidebar(
headerPanel("Data Science FTW"),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
shinyServer(
function(input, output){
}
)
runApp()
getwd(9)
getwd()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install packages("markdown")
library(markdown)
rpubsUpload(title, htmlFile, id = NULL, properties = list(), method = getOption("rpubs.upload.method", "internal"))
install.packages("markdown")
library(markdown)
rpubsUpload(title, htmlFile, id = NULL, properties = list(), method = getOption("rpubs.upload.method", "internal"))
install.packages("markdown")
install.packages("markdown")
library(markdown)
rpubsUpload(title, htmlFile, id = NULL, properties = list(), method = getOption("rpubs.upload.method", "internal"))
rpubsUpload("Assigment", htmlFile, id = NULL, properties = list(), method = getOption("rpubs.upload.method", "internal"))
rpubsUpload("Assigment", "index.html", id = NULL, properties = list(), method = getOption("rpubs.upload.method", "internal"))
rpubsUpload("Assigment", index.html, id = NULL, properties = list(), method = getOption("rpubs.upload.method", "internal"))
setwd("~/Projecto")
rpubsUpload("Assigment", "index.html", id = NULL, properties = list(), method = getOption("rpubs.upload.method", "internal"))
setwd("~/Projecto/Assigment")
rpubsUpload("Assigment", "index.html", id = NULL, properties = list(), method = getOption("rpubs.upload.method", "internal"))
rpubsUpload("index.Rmd", "index.html", id = NULL, properties = list(), method = getOption("rpubs.upload.method", "internal"))
?rpubsUpload
options(RCurlOptions = list(verbose = FALSE, capath = system.file("CurlSSL", "cacert.pem", package = "RCurl"), ssl.verifypeer = FALSE))
rpubsUpload("Assigment", "index.html", id = NULL, properties = list(), method = getOption("rpubs.upload.method", "internal"))
